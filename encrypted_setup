#!/usr/bin/env bash

# https://gist.githubusercontent.com/mattiaslundberg/8620837/raw/81b048ac6569a98fe015eb42d78dba0c4f6d93a1/arch-linux-install
# https://gist.githubusercontent.com/mattiaslundberg/8620837

# Install ARCH Linux with encrypted file-system and UEFI

# Download the archiso image from https://www.archlinux.org/
# Copy to a usb-drive
# dd if=archlinux.img of=/dev/sdX bs=16M && sync # on linux

# Boot from the usb. If the usb fails to boot, make sure that secure boot is
# disabled in the BIOS configuration.

# Set swedish keymap
# loadkeys sv-latin1

# This assumes a wifi only system...
# wifi-menu

# Create partitions
cgdisk /dev/sdX
1 100MB EFI partition  # Hex code ef00
2 free space  # Hex code ef02
3 250MB Boot partition  # Hex code 8300
4 100% size partiton  # (to be encrypted) Hex code 8300

#   https://sourceforge.net/p/gptfdisk/code/ci/master/tree/parttypes.cc
#   0x8200  0657FD6D-A4AB-43C4-84E5-0933C84B4F4F  Linux swap
#   0x8300  0FC63DAF-8483-4772-8E79-3D69D8477DE4  Linux filesystem
#   0x8301  8DA63339-0007-60C0-C436-083AC8230908  Linux reserved
#   0x8302  933AC7E1-2EB4-4F13-B844-0E14E2AEF915  Linux /home
#   0x8303  44479540-F297-41B2-9AF7-D131D5F0458A  Linux x86 root
#   0x8304  4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709  Linux x86-64 root
#   0x8305  B921B045-1DF0-41C3-AF44-4C6F280D3FAE  Linux ARM64 root
#   0x8306  3B8F8425-20E0-4F3B-907F-1A25A76F98E8  Linux /srv
#   0x8307  69DAD710-2CE4-4E3C-B16C-21A1D49ABED3  Linux ARM32 root
#   0x8e00  E6D6D379-F507-44C2-A23C-238F2A3DF928  Linux LVM
#   0xef00  C12A7328-F81F-11D2-BA4B-00A0C93EC93B  EFI System
#   0xef01  024DEE41-33E7-11D3-9D69-0008C781F39F  MBR partition scheme
#   0xef02  21686148-6449-6E6F-744E-656564454649  BIOS boot partition
#   0xfd00  A19D880F-05FC-4D3B-A006-743F0F84911E  Linux RAID

# Setup the encryption of the system
cryptsetup -c aes-xts-plain64 -y --use-random luksFormat /dev/sdX3
cryptsetup luksOpen /dev/sdX3 luks
pvcreate /dev/mapper/luks
vgcreate vg0 /dev/mapper/luks
lvcreate --size 8G vg0 --name swap
lvcreate -l +100%FREE vg0 --name root

# Create filesystems
mkfs.vfat -F32 /dev/sdX1
mkfs.ext2 /dev/sdX2
mkfs.ext4 /dev/mapper/vg0-root
mkswap /dev/mapper/vg0-swap

# Mount the new system 
mount /dev/mapper/vg0-root /mnt # /mnt is the installed system
swapon /dev/mapper/vg0-swap # Not needed but a good thing to test
mkdir /mnt/boot
mount /dev/sdX2 /mnt/boot
mkdir /mnt/boot/efi
mount /dev/sdX1 /mnt/boot/efi

# Install the system also includes stuff needed for starting wifi when first
# booting into the newly installed system

pacstrap /mnt base base-devel grub-efi-x86_64 vim git efibootmgr dialog wpa_supplicant

# 'install' fstab
genfstab -pU /mnt >> /mnt/etc/fstab
# Make /tmp a ramdisk (add the following line to /mnt/etc/fstab)
tmpfs	/tmp	tmpfs	defaults,noatime,mode=1777	0	0
# Change relatime on all non-boot partitions to noatime (reduces wear if using
# an SSD)

# Enter the new system
arch-chroot /mnt /bin/bash

# ...

# useradd -m -g users -G wheel -s /bin/bash MYUSERNAME
# passwd MYUSERNAME

# Configure mkinitcpio with modules needed for the initrd image
vim /etc/mkinitcpio.conf
# Add 'ext4' to MODULES
# Add 'encrypt' and 'lvm2' to HOOKS before filesystems

# Regenerate initrd image
mkinitcpio -p linux

# Setup grub
grub-install

# In /etc/default/grub edit the line GRUB_CMDLINE_LINUX to
# GRUB_CMDLINE_LINUX="cryptdevice=/dev/sdX3:luks:allow-discards" then run:

grub-mkconfig -o /boot/grub/grub.cfg

# Exit new system and go into the cd shell
exit

# Unmount all partitions
umount -R /mnt
swapoff -a

# Reboot into the new system, don't forget to remove the cd/usb
reboot
